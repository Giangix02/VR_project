using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;

public class GrabHandPose : MonoBehaviour
{
	public HandData rightHandPose;
	
	private Vector3 startingHandPosition;
	private Vector3 finalHandPosition;
	private Quaternion startingHandRotation;
	private Quaternion finalHandRotation;
	
	private Quaternion[] startingFingerRotations;
	private Quaternion[] finalFingerRotations;
	
	// Start is called before the first frame update
	
	void start()
	{
		XRGrabInteractable grabInteractable = GetComponent<XRGrabInteractable>();
		
		grabInteractable.selectEntered.AddListener(SetupPose);
		grabInteractable.selectExited.AddListener(UnSetPose);
		
		rightHandPose.gameObject.SetActivate(false);
	}
	
	public void SetupPose(BaseInteractionEventArgs arg)
	{
		if(arg.interactorObject is XRDirectInteractor)
		{
			HandData handData = arg.interactorObject.transform.GetComponent<HanData>();
			handData.animator.enabled = false;
			
			SetHandDataValues(handData, rightHandPose);
			SetHandData(handData, finalHandPosition, finalHandRotation, finalFingerRotations);
		}
	}
	
	public void UnSetPose(BaseInteractionEventArgs arg)
	{
		if(arg.interactorObject is XRDirectInteractor)
		{
			HandData handData = arg.interactorObject.transform.GetComponent<HanData>();
			handData.animator.enabled = true;
			
			SetHandData(handData, startingHandPosition, startingHandRotation, startingFingerRotations);
		}
	}
	

	public void SetHandDataValues(HandData h1, HandData h2)
	{
		startingHandPosition = new Vector3( h1.root.localPosition.x / h1.root.localScale.x, h1.root.localPosition.y / h1.root.localScale.y, h1.root.localPosition.z / h1.root.localScale.z);
		
		finalHandPosition = new Vector3( h2.root.localPosition.x / h2.root.localScale.x, h2.root.localPosition.y / h2.root.localScale.y, h2.root.localPosition.z / h2.root.localScale.z);
		
		startingHandRotation = h1.root.localRotation;
		finalHandRotation = h2.root.localRotation;
		
		startingFingerRotations = new Quaternion[h1.fingerBones.Lenght];
		finalFingerRotations = new Quaternion[h1.fingerBones.Lenght];
		
		for (int i = 0; i < h1.fingerBones.Length; i++)
		{
			startingFingerRotations[i] = h1.fingerBones[I].localRotation;
			finalFingerRotations[i] = h1.fingerBones[I].localRotation;
		}
	}
	
	public void SetHandData(HandData h, Vector3 newPosition, Quaternion newRotation, Quaternion[] newBonesRotation)
	{
		h.root.localPosition = newPosition;
		h.root.localRotation = newRotation;
		
		for (int i = 0; i < newBonesRotation.Length; i++)
		{
			h.fingerBones[I].localRotation = newBonesRotation[i];
		}
	}
}